/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type QuoteBomb = {
  _type: 'quoteBomb';
  quote?: string;
  creditsSource?: string;
  creditsMedia?: string;
  placement?: 0 | 1;
};

export type Footer = {
  _id: string;
  _type: 'footer';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  scrollingText?: string;
  hoverText?: string;
  link?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'event';
  };
  showNewsletter?: boolean;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type ExpandableContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h3' | 'h4' | 'h5' | 'h6';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      credit?: string;
      _type: 'customImage';
      _key: string;
    }
  | ({
      _key: string;
    } & GoogleMaps)
>;

export type MetaDescription = string;

export type MetaTitle = string;

export type RoleGroup = {
  _type: 'roleGroup';
  name?: string;
  persons?: Array<{
    person?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'person';
    };
    occupation?: string;
    description?: string;
    _key: string;
  }>;
};

export type Review = {
  _type: 'review';
  type?: 'standard' | 'dice' | 'stars';
  score?: number;
  content?: string;
  source?: string;
  company?: string;
  link?: string;
  date?: string;
};

export type GoogleMaps = {
  _type: 'googleMaps';
  address?: Geopoint;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Faq = {
  _type: 'faq';
  title?: string;
  expandableBlocks?: Array<
    {
      _key: string;
    } & ExpandableBlock
  >;
};

export type ExpandableBlock = {
  _type: 'expandableBlock';
  title?: string;
  content?: ExpandableContent;
};

export type Content = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      credit?: string;
      _type: 'customImage';
      _key: string;
    }
  | ({
      _key: string;
    } & Video)
  | ({
      _key: string;
    } & Review)
  | ({
      _key: string;
    } & ExpandableBlock)
  | ({
      _key: string;
    } & QuoteBomb)
  | ({
      _key: string;
    } & GoogleMaps)
  | ({
      _key: string;
    } & Faq)
>;

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type MuxVideo = {
  _type: 'mux.video';
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'mux.videoAsset';
  };
};

export type MuxVideoAsset = {
  _type: 'mux.videoAsset';
  status?: string;
  assetId?: string;
  playbackId?: string;
  filename?: string;
  thumbTime?: number;
  data?: MuxAssetData;
};

export type MuxAssetData = {
  _type: 'mux.assetData';
  resolution_tier?: string;
  upload_id?: string;
  created_at?: string;
  id?: string;
  status?: string;
  max_stored_resolution?: string;
  passthrough?: string;
  encoding_tier?: string;
  master_access?: string;
  aspect_ratio?: string;
  duration?: number;
  max_stored_frame_rate?: number;
  mp4_support?: string;
  max_resolution_tier?: string;
  tracks?: Array<
    {
      _key: string;
    } & MuxTrack
  >;
  playback_ids?: Array<
    {
      _key: string;
    } & MuxPlaybackId
  >;
  static_renditions?: MuxStaticRenditions;
};

export type MuxStaticRenditions = {
  _type: 'mux.staticRenditions';
  status?: string;
  files?: Array<
    {
      _key: string;
    } & MuxStaticRenditionFile
  >;
};

export type MuxStaticRenditionFile = {
  _type: 'mux.staticRenditionFile';
  ext?: string;
  name?: string;
  width?: number;
  bitrate?: number;
  filesize?: number;
  height?: number;
};

export type MuxPlaybackId = {
  _type: 'mux.playbackId';
  id?: string;
  policy?: string;
};

export type MuxTrack = {
  _type: 'mux.track';
  id?: string;
  type?: string;
  max_width?: number;
  max_frame_rate?: number;
  duration?: number;
  max_height?: number;
};

export type TranslationMetadata = {
  _id: string;
  _type: 'translation.metadata';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<
    {
      _key: string;
    } & InternationalizedArrayReferenceValue
  >;
  schemaTypes?: Array<string>;
  slug?: Slug;
};

export type InternationalizedArrayReferenceValue = {
  _type: 'internationalizedArrayReferenceValue';
  value?:
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'event';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'genre';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'frontPage';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'article';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'menuPage';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'programPage';
      };
};

export type ProgramPage = {
  _id: string;
  _type: 'programPage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  metaTitle?: MetaTitle;
  metaDescription?: MetaDescription;
  links?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'event';
  }>;
  socialMediaText?: string;
};

export type MenuPage = {
  _id: string;
  _type: 'menuPage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  metaTitle?: MetaTitle;
  metaDescription?: MetaDescription;
  links?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'article';
  }>;
  bottomLink?: {
    text?: string;
    link?:
      | {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'event';
        }
      | {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'article';
        };
  };
  socialMediaText?: string;
};

export type Article = {
  _id: string;
  _type: 'article';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  ingress?: string;
  language?: string;
  text?: Content;
  galleryDisplayType?: 1 | 2;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    credit?: string;
    _type: 'customImage';
  };
  video?: Video;
  event?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'event';
  };
  roleGroups?: Array<
    {
      _key: string;
    } & RoleGroup
  >;
  metaTitle?: MetaTitle;
  metaDescription?: MetaDescription;
};

export type Video = {
  _type: 'video';
  title?: string;
  muxVideo?: MuxVideo;
};

export type FrontPage = {
  _id: string;
  _type: 'frontPage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    credit?: string;
    _type: 'customImage';
  };
  hexagon?: HexagonButton;
  language?: string;
  metaTitle?: MetaTitle;
  metaDescription?: MetaDescription;
};

export type HexagonButton = {
  _type: 'hexagonButton';
  shouldShowNewsletter?: boolean;
  text?: string;
  linkToArticleOrEvent?:
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'article';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'event';
      };
};

export type Event = {
  _id: string;
  _type: 'event';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  language?: string;
  genre?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'genre';
  };
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    credit?: string;
    _type: 'customImage';
  };
  ingress?: string;
  ticketInformation?: string;
  saleStartOption?: 'saleStarted' | 'saleStartKnown' | 'saleStartUnknown';
  saleStartDateTime?: string;
  dates?: Array<{
    date?: string;
    ticketUrl?: string;
    busTicketUrl?: string;
    eventTicketStatus?: 1 | 2 | 3;
    busTicketStatus?: 1 | 2 | 3;
    _key: string;
  }>;
  duration?: string;
  labels?: Array<string>;
  text?: Content;
  galleryDisplayType?: 1 | 2;
  roleGroups?: Array<
    {
      _key: string;
    } & RoleGroup
  >;
  metaTitle?: MetaTitle;
  metaDescription?: MetaDescription;
};

export type Person = {
  _id: string;
  _type: 'person';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  language?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    credit?: string;
    _type: 'customImage';
  };
  biography?: {
    nb?: string;
    en?: string;
  };
};

export type CustomImage = {
  _type: 'customImage';
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  credit?: string;
};

export type Genre = {
  _id: string;
  _type: 'genre';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  language?: string;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type InternationalizedArrayReference = Array<
  {
    _key: string;
  } & InternationalizedArrayReferenceValue
>;

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | QuoteBomb
  | Footer
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | ExpandableContent
  | MetaDescription
  | MetaTitle
  | RoleGroup
  | Review
  | GoogleMaps
  | Geopoint
  | Faq
  | ExpandableBlock
  | Content
  | MediaTag
  | MuxVideo
  | MuxVideoAsset
  | MuxAssetData
  | MuxStaticRenditions
  | MuxStaticRenditionFile
  | MuxPlaybackId
  | MuxTrack
  | TranslationMetadata
  | InternationalizedArrayReferenceValue
  | ProgramPage
  | MenuPage
  | Article
  | Video
  | FrontPage
  | HexagonButton
  | Event
  | Person
  | CustomImage
  | Genre
  | Slug
  | InternationalizedArrayReference;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries/articlePage.ts
// Variable: ARTICLEPAGE_QUERY
// Query: *[_type=="article" && slug.current == $slug && language==$lang][0]{      title,       slug,       ingress,      metaTitle,       metaDescription,       galleryDisplayType,      image,      text[],        "tagTexts": text[style == "h2"]      {"subtitle": children[0].text, _key},        roleGroups[]{          ...,          persons[]{            ...,            person-> {              ...,              "biography": select(                $lang == "nb" => biography.nb,                 $lang == "en" => biography.en,              )            }          }        },        video,        'event': event->{slug},        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{          slug,          language,        }    }
export type ARTICLEPAGE_QUERYResult = {
  title: string | null;
  slug: Slug | null;
  ingress: string | null;
  metaTitle: MetaTitle | null;
  metaDescription: MetaDescription | null;
  galleryDisplayType: 1 | 2 | null;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    credit?: string;
    _type: 'customImage';
  } | null;
  text: Array<
    | ({
        _key: string;
      } & ExpandableBlock)
    | ({
        _key: string;
      } & Faq)
    | ({
        _key: string;
      } & GoogleMaps)
    | ({
        _key: string;
      } & QuoteBomb)
    | ({
        _key: string;
      } & Review)
    | ({
        _key: string;
      } & Video)
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        credit?: string;
        _type: 'customImage';
        _key: string;
      }
  > | null;
  tagTexts: Array<{
    subtitle: string | null;
    _key: string;
  }> | null;
  roleGroups: Array<{
    _key: string;
    _type: 'roleGroup';
    name?: string;
    persons: Array<{
      person: {
        _id: string;
        _type: 'person';
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        language?: string;
        image?: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          credit?: string;
          _type: 'customImage';
        };
        biography: string | null;
      } | null;
      occupation?: string;
      description?: string;
      _key: string;
    }> | null;
  }> | null;
  video: Video | null;
  event: {
    slug: Slug | null;
  } | null;
  _translations: Array<
    | {
        slug: null;
        language: string | null;
      }
    | {
        slug: Slug | null;
        language: string | null;
      }
    | null
  >;
} | null;

// Source: ./sanity/lib/queries/event.ts
// Variable: EVENT_QUERY
// Query: *[_type == "event" && slug.current == $slug && language == $lang][0]{      ...,      genre->,      image,      roleGroups[]{        ...,        persons[]{          ...,          person-> {            ...,            "biography": select(              $lang == "nb" => biography.nb,               $lang == "en" => biography.en,            )          }        }      },      dates[]{        ...,      } | order(date asc)    }
export type EVENT_QUERYResult = {
  _id: string;
  _type: 'event';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  language?: string;
  genre: {
    _id: string;
    _type: 'genre';
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    language?: string;
  } | null;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    credit?: string;
    _type: 'customImage';
  } | null;
  ingress?: string;
  ticketInformation?: string;
  saleStartOption?: 'saleStarted' | 'saleStartKnown' | 'saleStartUnknown';
  saleStartDateTime?: string;
  dates: Array<{
    date?: string;
    ticketUrl?: string;
    busTicketUrl?: string;
    eventTicketStatus?: 1 | 2 | 3;
    busTicketStatus?: 1 | 2 | 3;
    _key: string;
  }> | null;
  duration?: string;
  labels?: Array<string>;
  text?: Content;
  galleryDisplayType?: 1 | 2;
  roleGroups: Array<{
    _key: string;
    _type: 'roleGroup';
    name?: string;
    persons: Array<{
      person: {
        _id: string;
        _type: 'person';
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        language?: string;
        image?: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          credit?: string;
          _type: 'customImage';
        };
        biography: string | null;
      } | null;
      occupation?: string;
      description?: string;
      _key: string;
    }> | null;
  }> | null;
  metaTitle?: MetaTitle;
  metaDescription?: MetaDescription;
} | null;

// Source: ./sanity/lib/queries/footer.ts
// Variable: FOOTER_QUERY
// Query: *[_type=="footer" && language==$lang][0] {..., "link": link->slug.current}
export type FOOTER_QUERYResult = {
  _id: string;
  _type: 'footer';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  scrollingText?: string;
  hoverText?: string;
  link: string | null;
  showNewsletter?: boolean;
} | null;

// Source: ./sanity/lib/queries/frontPage.ts
// Variable: FRONTPAGE_QUERY
// Query: *[_type == "frontPage" && language == $lang][0]{      ...,      hexagon {        ...,         linkToArticleOrEvent->,      },    }
export type FRONTPAGE_QUERYResult = {
  _id: string;
  _type: 'frontPage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    credit?: string;
    _type: 'customImage';
  };
  hexagon: {
    _type: 'hexagonButton';
    shouldShowNewsletter?: boolean;
    text?: string;
    linkToArticleOrEvent:
      | {
          _id: string;
          _type: 'article';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          title?: string;
          slug?: Slug;
          ingress?: string;
          language?: string;
          text?: Content;
          galleryDisplayType?: 1 | 2;
          image?: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            credit?: string;
            _type: 'customImage';
          };
          video?: Video;
          event?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'event';
          };
          roleGroups?: Array<
            {
              _key: string;
            } & RoleGroup
          >;
          metaTitle?: MetaTitle;
          metaDescription?: MetaDescription;
        }
      | {
          _id: string;
          _type: 'event';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          title?: string;
          slug?: Slug;
          language?: string;
          genre?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'genre';
          };
          image?: {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            credit?: string;
            _type: 'customImage';
          };
          ingress?: string;
          ticketInformation?: string;
          saleStartOption?: 'saleStarted' | 'saleStartKnown' | 'saleStartUnknown';
          saleStartDateTime?: string;
          dates?: Array<{
            date?: string;
            ticketUrl?: string;
            busTicketUrl?: string;
            eventTicketStatus?: 1 | 2 | 3;
            busTicketStatus?: 1 | 2 | 3;
            _key: string;
          }>;
          duration?: string;
          labels?: Array<string>;
          text?: Content;
          galleryDisplayType?: 1 | 2;
          roleGroups?: Array<
            {
              _key: string;
            } & RoleGroup
          >;
          metaTitle?: MetaTitle;
          metaDescription?: MetaDescription;
        }
      | null;
  } | null;
  language?: string;
  metaTitle?: MetaTitle;
  metaDescription?: MetaDescription;
} | null;

// Source: ./sanity/lib/queries/menuPage.ts
// Variable: MENUPAGE_QUERY
// Query: *[_type == "menuPage" && language == $lang][0] {    metaTitle,     metaDescription,    title,    links[]->{      title,      image,      slug,      _type,      text[style=="h2"] {        defined(_key) => {_key},        "subtitle": children[0].text,        "slug": ^.slug.current      }[defined(subtitle)],    },    socialMediaText,    bottomLink {      text,      link->{      _type,      slug      },    }  }
export type MENUPAGE_QUERYResult = {
  metaTitle: MetaTitle | null;
  metaDescription: MetaDescription | null;
  title: string | null;
  links: Array<{
    title: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      credit?: string;
      _type: 'customImage';
    } | null;
    slug: Slug | null;
    _type: 'article';
    text: Array<{
      _key: string;
      subtitle: string | null;
      slug: string | null;
    }> | null;
  }> | null;
  socialMediaText: string | null;
  bottomLink: {
    text: string | null;
    link:
      | {
          _type: 'article';
          slug: Slug | null;
        }
      | {
          _type: 'event';
          slug: Slug | null;
        }
      | null;
  } | null;
} | null;

// Source: ./sanity/lib/queries/programPage.ts
// Variable: PROGRAMPAGE_QUERY
// Query: *[_type=="programPage" && language == $lang][0] {    metaTitle,    metaDescription,    title,    socialMediaText,    links[]->{        title,        image,        slug,        dates[]{          ...,        } | order(date asc)    } }
export type PROGRAMPAGE_QUERYResult = {
  metaTitle: MetaTitle | null;
  metaDescription: MetaDescription | null;
  title: string | null;
  socialMediaText: string | null;
  links: Array<{
    title: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      credit?: string;
      _type: 'customImage';
    } | null;
    slug: Slug | null;
    dates: Array<{
      date?: string;
      ticketUrl?: string;
      busTicketUrl?: string;
      eventTicketStatus?: 1 | 2 | 3;
      busTicketStatus?: 1 | 2 | 3;
      _key: string;
    }> | null;
  }> | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type=="article" && slug.current == $slug && language==$lang][0]{\n      title, \n      slug, \n      ingress,\n      metaTitle, \n      metaDescription, \n      galleryDisplayType,\n      image,\n      text[],  \n      "tagTexts": text[style == "h2"]\n      {"subtitle": children[0].text, _key},\n        roleGroups[]{\n          ...,\n          persons[]{\n            ...,\n            person-> {\n              ...,\n              "biography": select(\n                $lang == "nb" => biography.nb, \n                $lang == "en" => biography.en,\n              )\n            }\n          }\n        },\n        video,\n        \'event\': event->{slug},\n        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{\n          slug,\n          language,\n        }\n    }': ARTICLEPAGE_QUERYResult;
    '\n    *[_type == "event" && slug.current == $slug && language == $lang][0]{\n      ...,\n      genre->,\n      image,\n      roleGroups[]{\n        ...,\n        persons[]{\n          ...,\n          person-> {\n            ...,\n            "biography": select(\n              $lang == "nb" => biography.nb, \n              $lang == "en" => biography.en,\n            )\n          }\n        }\n      },\n      dates[]{\n        ...,\n      } | order(date asc)\n    }\n  ': EVENT_QUERYResult;
    '*[_type=="footer" && language==$lang][0] {..., "link": link->slug.current}': FOOTER_QUERYResult;
    '\n    *[_type == "frontPage" && language == $lang][0]{\n      ...,\n      hexagon {\n        ..., \n        linkToArticleOrEvent->,\n      },\n    }\n  ': FRONTPAGE_QUERYResult;
    '*[_type == "menuPage" && language == $lang][0] {\n    metaTitle, \n    metaDescription,\n    title,\n    links[]->{\n      title,\n      image,\n      slug,\n      _type,\n      text[style=="h2"] {\n        defined(_key) => {_key},\n        "subtitle": children[0].text,\n        "slug": ^.slug.current\n      }[defined(subtitle)],\n    },\n    socialMediaText,\n    bottomLink {\n      text,\n      link->{\n      _type,\n      slug\n      },\n    }\n  }': MENUPAGE_QUERYResult;
    '*[_type=="programPage" && language == $lang][0] {\n    metaTitle,\n    metaDescription,\n    title,\n    socialMediaText,\n    links[]->{\n        title,\n        image,\n        slug,\n        dates[]{\n          ...,\n        } | order(date asc)\n    }\n }': PROGRAMPAGE_QUERYResult;
  }
}
